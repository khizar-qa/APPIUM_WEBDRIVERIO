"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllSimulators = getAllSimulators;
exports.iOSSetup = iOSSetup;
exports.launchSimulator = launchSimulator;
exports.symbols = void 0;
var _child_process = require("child_process");
var _util = _interopRequireDefault(require("util"));
var _mobileHelper = require("@nightwatch/mobile-helper");
var _logger = _interopRequireDefault(require("./logger.js"));
var _chalk = _interopRequireDefault(require("chalk"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ui = new _logger.default().getInstance();
const execAsync = _util.default.promisify(_child_process.exec);
function getAllSimulators() {
  const simulators = [];
  const devices = JSON.parse((0, _child_process.execFileSync)('xcrun', ['simctl', 'list', '--json', 'devices'], {
    encoding: 'utf8'
  })).devices;
  Object.keys(devices).filter(version => version.includes('iOS')).forEach(version => devices[version].map(simulator => {
    if (simulator.isAvailable && simulator.state === 'Shutdown') {
      simulators.push({
        ...simulator,
        name: `${simulator.name} ${version.split('-')[1]}.${version.split('-')[2]}`,
        version: version.split(' ')[1]
      });
    }
  }));
  return simulators;
}
async function launchSimulator(simulator) {
  await execAsync(`xcrun simctl boot ${simulator}`);
  await execAsync(`open -a Simulator.app`);
}
const symbols = () => {
  let ok = String.fromCharCode(10004);
  let fail = String.fromCharCode(10006);
  if (process.platform === 'win32') {
    ok = '\u221A';
    fail = '\u00D7';
  }
  return {
    ok: ok,
    fail: fail
  };
};
exports.symbols = symbols;
async function iOSSetup() {
  const options = {
    install: false,
    setup: false,
    i: false,
    help: false,
    h: false,
    appium: false
  };
  const iOSSetup = new _mobileHelper.IosSetup(options);
  if ((0, _mobileHelper.getPlatformName)() !== 'mac') {
    ui.log.write('Only macOS is supported');
    return false;
  }
  const setupConfigs = await iOSSetup.getSetupConfigs(options);
  const missingRequirements = verifySetup(setupConfigs);
  await iOSSetup.setupIos(setupConfigs, missingRequirements);
  ui.log.write('\n');
}
function verifySetup(setupConfigs) {
  const missingRequirements = [];
  if (setupConfigs.mode === 'simulator' || setupConfigs.mode === 'both') {
    console.log('\nVerifying the setup requirements for simulators ...');
    try {
      (0, _child_process.execSync)('/usr/bin/xcodebuild -version', {
        stdio: 'pipe'
      });
      console.log(`  ${_chalk.default.green(symbols().ok)} Xcode is installed in your machine\n`);
    } catch (error) {
      console.log(`  ${_chalk.default.red(symbols().fail)} Xcode is not installed.`);
      missingRequirements.push('Xcode is not installed');
    }
    const simulators = getAllSimulators();
    if (simulators.length === 0) {
      console.log(`  ${_chalk.default.red(symbols().fail)} No valid simulators avaiable.`);
      missingRequirements.push('No valid simulators avaiable');
    }
  }
  if (setupConfigs.mode === 'real' || setupConfigs.mode === 'both') {
    console.log('\nVerifying the setup requirements for real devices...');
    try {
      // eslint-disable-next-line
      const stdout = (0, _child_process.execSync)("system_profiler SPUSBDataType | sed -n '/iPhone/,/Serial/p' | grep 'Serial Number:' | awk -F ': ' '{print $2}'", {
        stdio: 'pipe'
      });
      if (stdout.toString() === '') {
        console.log(`  ${_chalk.default.red(symbols().fail)} Device is either not connected or turned off.`);
        missingRequirements.push('Device is not connected');
      }
    } catch (error) {
      console.log(error);
    }
  }
  if (missingRequirements.length === 0) {
    console.log('\nGreat! All the requirements are being met.');
    if (setupConfigs.mode === 'real') {
      console.log('✅ You can go ahead and run your tests now on your iOS device.');
    } else if (setupConfigs.mode === 'simulator') {
      console.log('✅ You can go ahead and run your tests now on an iOS simulator.');
    } else {
      console.log('✅ You can go ahead and run your tests now on an iOS device/simulator.');
    }
  }
  return missingRequirements;
}