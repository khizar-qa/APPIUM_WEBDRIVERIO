"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.androidSetup = androidSetup;
exports.listEmulators = listEmulators;
var _inquirer = _interopRequireDefault(require("inquirer"));
var _ios = require("./ios.js");
var _android = require("./android.js");
var _mobileHelper = require("@nightwatch/mobile-helper");
var _logger = _interopRequireDefault(require("./logger.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ui = new _logger.default().getInstance();
async function androidSetup() {
  const androidSetup = new _mobileHelper.AndroidSetup();
  await androidSetup.run();
}
async function listEmulators() {
  const platform = process.platform;
  let emulatorList, emulatorsOrSimulators;
  if (platform === 'darwin') {
    emulatorsOrSimulators = await _inquirer.default.prompt([{
      type: 'list',
      message: 'Do you want to launch emulators/simulators?',
      name: 'emusim',
      choices: ['Android Emulators', 'iOS Simulators'],
      validate(answer) {
        if (answer.length < 1) {
          return 'You must choose at least one option.';
        }
        return true;
      }
    }]);
    if (emulatorsOrSimulators.emusim === 'Android Emulators') {
      emulatorList = await (0, _android.getAllEmulators)();
    } else {
      emulatorList = await (0, _ios.getAllSimulators)();
    }
  } else if (platform === 'win32') {
    emulatorList = await (0, _android.getAllEmulators)();
  } else {
    console.log('Unsupported platform');
    return;
  }
  try {
    if (emulatorList && emulatorList.length === 0) {
      console.log('No emulators found');
      return;
    }
    const selectedEmulator = await _inquirer.default.prompt([{
      type: 'list',
      message: 'Select emulators to launch',
      name: 'emulators',
      choices: emulatorList,
      validate(answer) {
        if (answer.length < 1) {
          return 'You must choose at least one emulator/simulator.';
        }
        return true;
      }
    }]);
    const emulatorString = selectedEmulator.emulators;
    console.log(`Launching ${emulatorString}...`);
    if (platform === 'darwin' && emulatorsOrSimulators.emusim === 'Android Emulators') {
      await (0, _android.launchEmulator)(emulatorString);
    } else if (platform === 'darwin' && emulatorsOrSimulators.emusim === 'iOS Simulators') {
      await (0, _ios.launchSimulator)(emulatorList.find(simulator => simulator.name === emulatorString).udid);
    } else if (platform === 'win32') {
      await (0, _android.launchEmulator)(emulatorString);
    }
    console.log(`Launching ${emulatorString} completed successfully`);
  } catch (error) {
    console.error(error);
  }
}