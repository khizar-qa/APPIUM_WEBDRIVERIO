#!/usr/bin/env node
"use strict";

var _emulators = require("./emulators.js");
var _inquirer = _interopRequireDefault(require("inquirer"));
var _serverInstall = require("./serverInstall.js");
var _ios = require("./ios");
var _logger = _interopRequireDefault(require("./logger.js"));
var _chalk = _interopRequireDefault(require("chalk"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ui = new _logger.default().getInstance();
const options = [{
  name: 'Need help setting up Android Environment to run your Appium test?',
  fn: _emulators.androidSetup,
  value: 'android-setup'
}, {
  name: 'Need help setting up iOS Environment to run your Appium test?',
  fn: _ios.iOSSetup,
  value: 'android-setup'
}, {
  name: 'Install Appium Server',
  fn: _serverInstall.installAppiumServer,
  value: 'install-server'
}, {
  name: 'Install Appium Drivers',
  fn: installRequiredDrivers,
  value: 'install-drivers'
}, {
  name: 'Install Appium Plugin',
  fn: _serverInstall.installPlugin,
  value: 'install-plugin'
}, {
  name: 'Run Appium Doctor',
  fn: _serverInstall.runAppiumDoctor,
  value: 'run-doctor'
}, {
  name: 'Launch Emulators/Simulators',
  fn: _emulators.listEmulators,
  value: 'run-emulator'
}, {
  name: 'Exit',
  fn: async () => {
    ui.log.write('Exiting Appium Installer...\n');
    process.exit(0);
  },
  value: 'exit'
}];
async function main() {
  const nodeMajorVersion = parseInt(process.version.slice(1).split('.')[0], 10);
  if (nodeMajorVersion < 16) {
    ui.log.write(`\n👋 Hello, Appium user ✨\n\n`);
    ui.log.write(`\n‼️  BEFORE YOU START:\n\n`);
    ui.log.write(`🌐 Make sure you have node 16 and above\n\n`);
    ui.log.write(`Your current node version is ${process.version}\n\n`);
    process.exit(1);
  }
  ui.log.write(`\n👋 Hello, Appium user ✨\n\n`);
  while (true) {
    const {
      selectedOption
    } = await _inquirer.default.prompt([{
      type: 'list',
      name: 'selectedOption',
      message: 'Select an option',
      choices: options.map(option => option.name)
    }]);
    const currentOption = options.find(option => option.name === selectedOption);
    if (!currentOption) {
      throw new Error(`Invalid menu option selected: ${selectedOption}`);
    }
    await currentOption.fn();
    ui.log.write(_chalk.default.green(`${currentOption.name} COMPLETED\n`));
  }
}
async function installRequiredDrivers() {
  const driverChoices = await (0, _serverInstall.getDriver)();
  await _inquirer.default.prompt([{
    type: 'checkbox',
    message: 'Select Drivers to install',
    name: 'drivers',
    choices: driverChoices
  }]).then(async answers => {
    for (const value of answers.drivers) {
      await (0, _serverInstall.installDrivers)(value);
    }
  }).catch(error => {
    console.log(error);
  });
  ui.log.write('\n');
}
main();